(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{162:function(n,a,e){"use strict";e.r(a);var t=e(0),r=Object(t.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("div",{staticClass:"content"},[e("p",[n._v("day1\n第一节课：\nJavaScript简介：\n1、什么是JavaScript？\n官方：JavaScript是一种基于对象和事件驱动的客户端脚本语言。是嵌入到HTML中的。\n换句话说JavaScript是运行在客户端的嵌入式脚本语言")]),n._v(" "),e("pre",[e("code",[n._v('    2、JavaScript的组成部分 (ECMA 欧洲计算机制造商协会)\n        ECMAScript-262（语法规范）   //ECMA-262  js的核心：变量声明 函数 语句 if\n        document object model //DOM   文档对象模型   页面元素  div h2\n        Browser object model  //BOM   浏览器对象模型\n        版本：ES4 ES6\n            \n    3、javaScript的基本特点：（理解）\n        是一种解释性的脚本语言，（代码不进行预编译）（记忆）\n        主要用来向HTML页面加入交互行为\n        可以直接嵌入 HTML 页面，但写成单独的js文件有利于结构和行为的分离\n        \n    4、JavaScript特性（了解）\n        a)不同于服务器端脚本语言，例如PHP与ASP，JavaScript主要被作为客户端脚本语言在用户的浏览器上运行，不需要服务器的支持\n        b)跨平台、容易上手，随着引擎如V8和框架如Node.js的发展，及其事件驱动及异步IO等特性，JavaScript逐渐被用来编写服务器端程序\n        c)所有主流浏览器都支持JavaScript\n        d)目前，全世界大部分网页都使用JavaScript\n\n    5、JavaScript可以实现什么效果（作用）（了解）\n        a)嵌入动态文本于HTML页面\n        b)对浏览器事件作出响应\n        c)读写HTML元素\n        d)在数据被提交到服务器之前验证数据\n        e)检测访客的浏览器信息\n        f)控制cookies，包括创建和修改等\n         \n    4、在HTML中如何去使用JavaScript（js代码放在哪里）\n        内嵌脚本：在head或body中使用<script type="text/javascript">写入js代码<\/script>\n        外部文件：<script src="路径/文件名.js" type="text/javascript"><\/script>\n        执行顺序：从上到下依次执行\n        位置：body 或head\n    \n第二节课：了解JavaScript的基础语法\n\n    1、什么是标识符？\n        在js中所有的可以由自己自主命名的都可称为是标识符，例如\n        变量名 函数名 属性名或则函数的参数（你自己的名字就是你的标识，能让他认识你）\n        \n    2、标识符的命名规则：\n        由字母、数字、下划线_ 或 $组成\n        不能以数字开头，区分大小写\n        不能使用关键字、保留字等作为标识符。\n        建议驼峰命名规则，第一个字母小写、其他单词的首字母大写。\n    3、输出的三种方式：\n        alert(\'内容\') 弹出框 警示框\n        document.write("内容");页面内输出\n            注意：如果遇到div标签，以字符串方式输出（浏览器识别标签，例如识别一级标题）\n        控制台输出（打印输出）console.log（"内容"）;  \n        举例说明：问是否命名正确;\n    4、JavaScript注释：\n        html:\n        css:  // /**/，。\n        注释的作用：\n        JavaScript 不会执行注释。\n        - 我们可以添加注释来对 JavaScript 进行解释，提高代码的可读性。\n        也可以使用注释来阻止一行或多行代码执行 \n        js: //   /**/\n\n    5、JavaScript语句和分号（了解）\n        JavaScript语句向浏览器发出的命令，语句的作用是告诉浏览器该做什么。\n        下面的语句JavaScript语句向id= "demo"的HTML元素输出文本"HRlloWord"\n        document.getElementById("demo").innerHTML = "HelloWord"\n\n        分号：分号用于分隔 JavaScript 语句。\n            通常我们在每条可执行的语句结尾添加分号。\n            使用分号的另一用处是在一行中编写多条语句\n            分号是可以省略的，在JavaScript中，用分号结束语句是可选的；\n    \n    6、什么是变量？\n        JavaScript变量可用于存放值（x=5）和表达式（z=x+y)的占位符，\n        变量可以使用短名称（x,y)，也可以使用描述性更好的名称（age,sum）等命名，\n\n    7、定义（声明）变量的关键字是：var\n        语法：var 变量名\n    8、变量的赋值\n        声明的同时赋初始值  var 变量名 = 初始值\n        先声明后赋值   var 变量名    变量名 = 值\n\n    9、变量的相关规则：   \n        区分大小写\n        定义多个变量之间用,隔开  var a=5,b=10;\n        变量赋值：后写的值覆盖先写的值\n        变量的赋值：把右侧的运算结果赋给左侧的变量；\n        c = a+b;\n        var 声明的变量叫做显示声明\n        没有var声明的变量 直接赋值，叫隐式声明，是一个全局变量。\n        \n        ECMAScript的变量时松散类型,松散类型，可以用来保存任何类型的数据\n        换句话说：变量本身是没有类型的，变量的类型是由变量的值决定的。\n\n\n第三节课：掌握基础数据类型\n\n   1、 数据类型：\n           5种基本类型：\n                Number类型 （数值类型） 10 34.00 52.00\n                String类型 （字符串类型） "123456"\n                Boolean类型 (布尔类型)  true false\n                undefined类型 （未定义类型） \n                null类型 （空类型） null 也叫空对象指针；\n           1种复杂类型：\n                Object 对象类型 （引用类型）\n                var obj = {} ;//对象字面量 \n                var obj = new Object(); //构造模式\n    2、判断数据类型的关键字:typeof用来表示表达式的数据类型的字符串\n            语法：typeof 变量名  或则\n                 typeof（变量名）\n            功能：检测变量类型的返回值\n            返回值："number" "string" "boolean" "undefined" "object" "function"\n\n    3、数据类型介绍：\n        3.1、undefined类型 (未定义类型),表示，变量不含有值\n            该类型只有一个值：即特殊的undefined\n            var a;\n            1)变量定义未赋值 ：值是undefined  返回类型：undefined;\n            2)变量没有定义（没有声明） ： 值：报错 ； 返回类型：undefined；\n\n        3.2、null：可以通过将一个变量的值设置为null，来清空变量。\n            var a=123;a=null >null;\n            1)null值表示一个空对象指针；\n            2)如果定义的变量准备在将来用于保存对象，那么最好将改变的量初始化为null，而不是其他值。\n            3）null是一种特殊的object类型；\n            说明：undefined 值时派生自null值，所以undefined == null的结果是true\n        3.3、Number：表示整数和浮点数\n                整数：1,2,3\n                浮点数：.1,0.4\n                极大数字：123e5  //12300000  科学计数法\n                极小数字：123e-5  //0.00123 \n                注意：保存浮点型的数值需要的内存空间比整形大两倍，因此ECMAScript,会讲能转化为整型的浮点数值自动转化为整型，如12.0\n                说明：浮点型的数值最高精度为17位小数，而我们口算中，可能不会精确，\n                所以在判断时要注意考虑到这个问题\n                eg:alert(0.1+0.2);\n            NaN：即非数值（Not a Number）是一个特殊的数值。这个数值用于表示一个本来要返回数值的操作数未返回数值的情况(这样就不会抛出错误了)。\n                例如，在其他编程语言中，任何数值除以 0都会导致错误，从而停止代码执行。但在 ECMAScript中，任何数值除以 0会返回 NaN ，因此不会影响其他代码的执行。\n                var box = 0/0;\n\n                说明：\n                    1）NaN不是一个数值，但他是一个number\n\t                2）任何涉及NaN的操作（例如NaN/10）都会返回NaN。\n\t                3）NaN与任何值都不相等，包括NaN本身。\n                    var a = NaN + 1  //NaN\n                    console.log(NaN  == NaN)  //false;\n\n        3.4、string类型：用 "" \'\'包含的内容\n                注意："" \'\' 具有对称性 成对出现\n                var str= "1610B"\n                也可以在字符串中使用引号，只要不匹配包围字符串的引号即可\n                var str = \'<div class = \'box\'>123</div>\'\n                字符串的属性：length 表示长度\n                    变量名.length 返回变量的长度，类型是一个数值类型\n                空字符 "" \'\' 的长度为0；\n              \n\n        3.5、Boolean 布尔类型 用于表示真假的类型，即true表示真，false表示假\n        3.6、Object对象类型\n            var timer = null\n            timer 的值时null 空对象指针\n            timer 的类型为object\n            object:对象，只是带有属性和方法的特殊数据类型，\n                    对象有花括号分隔，在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔\n                    对象字面量方式定义：var aa={name:"王五"，age:"23",sex:"男"，sayName: function(){\n            alert(this.name);\n            }}\n                    构造函数的方式定义：var aa = new Object()\n\n                        为对象添加属性和方法：aa.name = "张三"；\n                        \n                    对象属性的两种寻址方式：\n                    var b = aa.sex;\n                    var c = aa["age"]  //中括号方式访问的必须是字符串\n            对象数组：arr[{name:"王五"，age:"23",sex:"男"},{name:"赵柳",age:"45",sex:"女"}]\n            访问：arr[0].name;\n        说明：var a = function(){}; typeof a;  返回值时"function";\n\n第四节课：\n\n    1.数据类型的转换\n        1）转换为布尔类型：\n            Boolean(变量)\n            数值转换为布尔： 非0 数字都是true ；0和NaN 是 false\n            字符串转换为布尔 非空字符串都是true ； "" 是false   \n            undefined 转换为布尔为 false \n            null转换为布尔为 false\n\n            也就是说：转换为false的有哪些类型：0  NaN  ""  undefined null\n            \n        2)转换为number类型：\n            有3个函数可以把非数值转换为数值：Number()、parseInt()和parseFloat()其中Number()可以用于任何数据类型，\n            而parseInt()和parseFloat()则专门用于把字符串转换成数值。\n\n            字符串转换为number的规则：\n                1.只包含数值的字符串，会直接转数值，如果包含前导0，即自动去掉。\n\n                    alert(Number(\'456\')); //456\n                    alert(Number(\'070\')); //70\n                2.只包含浮点数值的字符串，会直接转成浮点数值，如果包含前导和后导0，即自动去 掉。\n\n                    alert(Number(\'08.90\')); //8.9\n\n                3.如果字符串是空，那么直接转成成0。\n\n                    alert(Number(\'\')); //0\n\n                4.如果不是以上三种字符串类型，则返回NaN。\n\n                    alert(Number(\'Lee123\'); //NaN\n                    Number("123sfsda");  //NaN\n\n            布尔转换为number   true:1   false:0\n            undefined ：NaN (易错)\n            null : 0;\n\n        3)字符串有两个方法。专门转化字符串为数字的：\n            parseInt(字符串)\t转化为整数     \n            parseFloat(字符串)\t转化为浮点数\n            从第一位开始截取到符合条件的数字\n\n            截取：截取不到结果是NaN.\n\n            parseInt(\'\') NaN\n            parseFloat(\'\') NaN\n            Number(\'\')   0\n\n            \n\n\n        4)  isNaN(变量)   返回值是布尔值 true false \n            功能：用来检测是否是非数字\n            \n                  非数字为true\n                  是数字为false\n\n        true: NaN  undefined  "abdee"   \n          Number(变量)如果结果是NaN 就true.\n                          转化为数字 false .\n\n\n    isNaN("123abc")   Number("123abc")==NaN   isNaN(NaN)\n    isNaN（123）  false\n    是NaN？\n\n    !isNaN()  \n    不是NaN  true\n    是   false\n\n    如果是NaN   返回true\n    如果不是NaN  返回false;   123是NaN  false\n\n    var a = 123\n    String();   //String(a)\n    toString()  //a.toString();\n')])]),n._v(" "),e("p",[n._v("五、运算符：\n算术运算符：\n加法：\n数字+数字 = 数字\n数字+NaN = NaN\n数字+字符串=字符串；  //字符串拼接\n数字+null=数字   //null转换为数字是0；\n熟悉+undefined= NaN   //undefined 转换为数字是NaN\n数字+true/false=数字"),e("br"),n._v("\n字符串+任何=字符串\n说明：+它既是算术运算符有事字符串运算符，即，它即可做加法运算，又可以做拼接")]),n._v(" "),e("pre",[e("code",[n._v("    减法：\n    乘法：\n    除法/：\n    求模%： 求余数\n总结：\n+   \n    a.只要一端是字符串 ，就拼接字符串\n\tb.一端是数字 ，另外一端是true,false,NaN ,null,undefined\n\t   则Number()之后，做加法。加不出来就是NaN\n\n- *  /  %  无论何时都是转化为数字，做减法，减不出来NaN.\n\n    累加（递增）：++\n        ++a与a++都是对a进行递增的过程\n        区别：\n            ++a先返回递增之后的a的值（即先加再运算）\n\n            a++先返回a的原值，再返回递增之后的值（先运算后加）\n\n    递减：-- 同理\n")])]),n._v(" "),e("p",[n._v("逻辑运算符：\n&& || ！\n逻辑与 &&：都为真才能为真\n'123' && 'abc' &&   4==5")]),n._v(" "),e("pre",[e("code",[n._v("    逻辑与：遇到第一个假，就停下啦，返回第一个假值；\n            如果都为真，则返回最后一个\n\n逻辑或 ||：都为假才能为假\n\n    逻辑或：遇到第一个真，就停下啦，\n            如果都是假，则返回最后一个假值\n\n逻辑非 ！：返回值布尔值\n    \t!5  首先把5转boolean(5) 在取反\n    \t!4<=0  false<=0\n")])]),n._v(" "),e("p",[n._v("关系运算符（比较运算符）>  >=  <  <=  ==   ===  ！=   ！==")]),n._v(" "),e("pre",[e("code",[n._v("返回值都是boolean类型。\n    1)两端都是数字直接比较 。\n    2)一端是数字，另外一端不是数字，把不是数字的转化为数字进行比较。\n    3)如果一端是布尔值，另一端不管是什么，先把布尔转数字。 \n    4)如果两端都是字符串.则按照Ascii码值比较。\n\n== != === !==也叫作相等运算符：\n    == 相等 != 不等     先转化为相同类型，再比较\n    === 全等    !== 不全等\t 不转化，直接比较\n    返回值都是boolean类型。\n\t\t\t 1）两端都是数字或者字符串，直接比较。\n                \"abc\"=='bcd'  4==5\n\t\t\t 2）一端是布尔值，先把布尔转为数字。 \n\t\t     3) 一端是数字，一端是字符串，把字符串转化数值。\n\t\t     4) undefined  null NaN  不转化直接比较。\n\n\t\t     \tundefiend 不等任何值   \n\t\t     \tnull 不等任何值\n\t\t     \tNaN  不等任何值\n\t\t     \tnull==undefined true\n\t\t     \tNaN==NaN  false\n")])])])}],!1,null,null,null);a.default=r.exports}}]);